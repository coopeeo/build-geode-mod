name: Test the action

on:
  workflow_dispatch:
  push:
    branches:
      - '**'

env:
  test-mod-path: example-mod-test
  test-geode-nightly: false

jobs:
  #fetch-geode-version:
  #  name: Get Geode Version
  #  runs-on: ubuntu-latest
  #  outputs:
  #    geode_ver: ${{ steps.get_version.outputs.geode_version }}
  #  steps:
  #  - name: Get latest release tag
  #    id: get_version
  #    run: |
  #      # Get latest Geode version
  #      GEODE_VERSION=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" https://api.github.com/repos/geode-sdk/geode/releases/latest | jq -r .tag_name)
  #      GEODE_VERSION=${GEODE_VERSION#v}
  #      echo "geode_version=$GEODE_VERSION" >> $GITHUB_OUTPUT
  build:
    strategy:
      fail-fast: false
      matrix:
        config:
        - name: Windows
          os: windows-latest
        - name: macOS
          os: macos-latest
        - name: Android32
          os: ubuntu-latest
          target: Android32
        - name: Android64
          os: ubuntu-latest
          target: Android64

    name: ${{ matrix.config.name }}
    runs-on: ${{ matrix.config.os }}
    # needs: ['fetch-geode-version']

    steps:
      - uses: actions/checkout@v4

      - uses: actions/checkout@v4
        with:
          repository: geode-sdk/example-mod
          path: ${{ env.test-mod-path }}

      - name: Checkout VERSION from geode-sdk/geode
        uses: actions/checkout@v4
        if: env.test-geode-nightly == true
        with:
          repository: geode-sdk/geode
          ref: nightly
          sparse-checkout: |
            VERSION
          sparse-checkout-cone-mode: false
          path: temp-geode

      - name: Modify Example Mod Files
        shell: bash
        run: |
          # get latest tag
          if [ -d "temp-geode" && ${{ env.test-geode-nightly }} == true ]; then
            GEODE_VERSION=$(cat temp-geode/VERSION)
          else
            if [ -d "temp-geode" ]; then
              rm -rf temp-geode
            fi
            mkdir temp-geode
            git -C "temp-geode" init
            git -C "temp-geode" remote add origin https://github.com/geode-sdk/geode.git
            git -C "temp-geode" fetch --tags --depth=1
            GEODE_VERSION=$(git -C "temp-geode" describe --tags `git -C "temp-geode" rev-list --tags --max-count=1`)
            if [ $GEODE_VERSION == "nightly" ]; then
              GEODE_VERSION=$(git -C "temp-geode" describe --tags `git -C "temp-geode" rev-list --tags --max-count=2`)
              GEODE_VERSION=${GEODE_VERSION#nightly}
              GEODE_VERSION=${GEODE_VERSION#\n}
            fi
          fi

          #GEODE_VERSION="${{ needs.fetch-geode-version.outputs.geode_ver }}"
          
          GEODE_VERSION=${GEODE_VERSION#v}
          if [ $GEODE_VERSION == null ]; then 
            echo "Could not get the latest version for testing"
            exit 1;
          fi

          # Set path of mod.json file
          mod_json_path="${{ env.test-mod-path }}/mod.json"

          # Read the current mod.json content
          mod_json=$(cat $mod_json_path)

          # Replace the placeholders
          updated_mod_json=$(echo "$mod_json" | jq \
            --arg geode_version "$GEODE_VERSION" \
            --arg mod_id "geode.example" \
            --arg mod_name "Example Mod" \
            --arg mod_version "0.0.0" \
            --arg mod_description "The example Geode mod!" \
            --arg developer "Geode Team" \
            '.geode = $geode_version |
            .id = $mod_id |
            .name = $mod_name |
            .version = $mod_version |
            .description = $mod_description |
            .developer = $developer')

          # Write updated_mod_json variable contents to mod.json file
          echo $updated_mod_json > $mod_json_path
          
          # Write thing to GitHub ENV
          echo "geode-sdk-type=$(${{ env.test-geode-nightly }} == true ? "nightly" : "given")" >> GITHUB_ENV
          
          # Delete temp-geode folder
          rm -rf temp-geode

      - name: Build the mod
        uses: ./
        with:
          sdk: ${{ env.geode-sdk-type }}
          build-config: RelWithDebInfo
          path: ${{ env.test-mod-path }}
          combine: true
          target: ${{ matrix.config.target }}

  package:
    name: Package builds
    runs-on: ubuntu-latest
    needs: ['build']

    steps:
      - uses: actions/checkout@v4

      - uses: ./combine
        id: build

      - uses: actions/upload-artifact@v4
        with:
          name: Build Output
          path: ${{ steps.build.outputs.build-output }}
